<h2>Side Projects</h2>

<div class="container-fluid">
  <div class="row">
    <div class="col-xs-12 col-lg-4 ">
      <div class="card card-white center-inside-column margined-bottom margin-l-r-auto">
        <img src="images/logo_bookshare_blue.png" alt="">
        <a href="" class="card-link"></a>
      </div>
      <!-- insert <div class="card"> -->
    </div>
    <div class="col-xs-12 col-lg-4 ">
      <div class="card card-white center-inside-column margined-bottom margin-l-r-auto">
        <img src="images/logo_easycat.png" alt="">
        <a href="" class="card-link"></a>
        <div id="player"></div>

        </div>
      <!-- insert <div class="card"> -->
    </div>
    <div class="col-xs-12 col-lg-4">
      <div class="card card-white center-inside-column margined-bottom margin-l-r-auto">
        <img src="images/Foodelice-logo-grey.png" alt="">
        <a href="" class="card-link"></a>
      </div>
      <!-- insert <div class="card"> -->
    </div>
  </div>
</div>

<% content_for(:after_js) do %>
<!--   <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // var currentVideoId = null;

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        height: '360',
        width: '640',
        videoId: '',
        events: {
          // 'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }

    // 4. The API will call this function when the video player is ready.
    // function onPlayerReady(event) {
    //   event.target.playVideo();
    // }


    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
      if (event.data == YT.PlayerState.PLAYING && !done) {
        setTimeout(stopVideo, 6000);
        done = true;
      }
    }
    function stopVideo() {
      player.stopVideo();
    }
    // 6. This function searches for videos related to the keyword 'dogs'.
    //    The video IDs and titles of the search results are logged to Apps Script's log.

    function searchByKeyword() {
      var results = YouTube.Search.list('id,snippet', {q: 'dogs', maxResults: 1});
      console.log(results)
    }

    $(".test").click(function(event){
      var q_attribute = event.target.getAttribute('q');
      var q_encoded = encodeURIComponent(q_attribute);
      var key = "AIzaSyAdF0b05v_zbxg2otFoNJfCfmjVu3jNEw0";
      // Call Youtube API
      var http_request = "https://www.googleapis.com/youtube/v3/search?part=snippet&q="+q_encoded+"&key="+key+"";
      $.ajax({
          type: "GET",
          url: http_request,
          dataType: "json",
          success: function(data) {
              var videoId = data.items[0].id.videoId;
              //  To Dynamically change Youtube Player videoID
              player.loadVideoById(videoId);
          },
          error: function(result) {
              alert("Error");
          }
      });
    });
  </script> -->
<% end %>
